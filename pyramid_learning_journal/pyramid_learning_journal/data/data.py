Posts = [
    {'id': 0, 'title': '5/15/17 Journal', 'creation_date': 'Monday, 15 May, 2017, 3:01 pm', "body": "First day of Python. Following allowing with the lecture was hard and confusing in places, but I stumbled through pretty well and think I have everything running as it should. Light work load for the first day of class. Light enough to easily finish it all before the end of lab. The calm before the storm..."},
    {'id': 1, 'title': '5/16/17 journal', 'creation_date': 'Tuesday, 16 May, 2017, 12:48 pm', "body": "Today we went through the core of python syntax, much of which was familiar to me from my time before codefellows, and from the codecademy. But review is always good to do. Also, I see how testing would be a wildly useful (though inconvenient) tool for ensuring functional code. Historically, my code testing has been with the use of console logs, to make sure I am handling the proper variables before I ultimately return it. I can see how testing is more dynamic and can help test the functionality of the code as a whole, rather than little bits and pieces of it."},
    {'id': 2, 'title': '5/17/17 journal', 'creation_date': 'Thursday, 18 May, 2017, 8:05 am', "body": "Today seems to be the first day the really turned up the heat. I I got completely left behind in the lecture when he was talking about setups. I was trying to follow along on my computer, and I must have missed a step somewhere, and everything in my console completely broke, requiring time with a TA in order to get me back on track. I still don\'t fully understand setups, so I'm hoping to use the weekend to do some reading and figure out all that I missed."},
    {'id': 3, 'title': '5/18/17 journal', 'creation_date': 'Friday, 19 May, 2017, 8:01 am', "body": "Today made more sense to me than yesterday. The mechanics of python arev really starting to come together for me. I think i prefer it over javascript, and will have an easier time doing some of the same things with it . Looking at best practice solutions in codewars still baffles me and embarrasses me. I am still so far from figuring out things that can rival the pretty one line answers they give."},
    {'id': 4, 'title': '5/19/17 journal', 'creation_date': 'Friday, 19 May, 2017, 6:51 pm', "body": "Today we worked on the mailroom code off campus. Is often nice to be able to sleep in a bit and then choose the space you want to work on code in. I'm feeling like I'm more or less on top of what we covered this week. I'm a little worried about some of the assignments I turned in though. After having spent many hours on each of them, I still get the sense that there are going to be more aspects that I missed or something wrong with the linter or setup that will dock me points."},
    {'id': 5, 'title': '5/22/17 journal', 'creation_date': 'Tuesday, 23 May, 2017, 8:18 am', "body": "First day of week two. Now we are relatively \"comfortable\" with python, and ready to move on to new horizons in our code! Today we're handling linked list data structures and network socketing. The linked list functionality is kind of an easy break for me, as I had to learn it while TAing Nick's 301 class last month. But the network stuff is a whole different story. Thankfully, I followed Nick's example verbatim in class and got a working connection running on my own computer, so that should help with the assignment."},
    {'id': 6, 'title': '5/23/17 journal', 'creation_date': ' Wednesday, 24 May, 2017, 7:58 am', "body": "Today\'s assignments were a fair portion easier than yesterday\'s. Which was nice, since I had to leave early yesterday, and this gave me room to really catch up."},
    {'id': 7, 'title': '5/24/17 journal', 'creation_date': 'Thursday, 25 May, 2017, 8:00 am', "body": "Today we learned about super classes, and pytest fixtures. As with most days with multiple topics, one came easier to me than the other. Fixtures make sense as constants that one can set up to streamline the pytest process, which is great. But super classes don't really make sense to me. Why would I use this system instead of using the normal class inheritance system? It seems like it takes the same amount of time to write the line of code..."},
    {'id': 8, 'title': '5/26/17 journal', 'creation_date': 'Friday, 26 May, 2017, 7:59 am', "body": "Today, I finally made an attempt to make a request to my server using an internet browser, rather than the client.py. I got a crappy little html page to load. A page which, by comparison to everything I have done in 201 and 301, is very unimpressive.... But that's not the point. The fact that I got my own working server to receive a signal, and populate something to an internet page gives such a great feeling of accomplishment."},
    {'id': 9, 'title': '5/27/17 journal', 'creation_date': 'Monday, 29 May, 2017, 4:45 pm', "body": "Today we learned about concurrence in servers, which seems like a useful (and essential) tool when handling large amounts of requests. I was not able to finish the code challenge for the day, as we were pulled into the class room to listen to guest speakers, though I hope to make another crack at it when i have some free time at some point during the week."},
    {'id': 10, 'title': '5/30/17 Journal', 'creation_date': 'Wednesday, 31 May, 2017, 8:00 am', "body": "Working on our own journal site. I'm a little embarrassed by my framework for how simplistic it is. This is all stuff that I know how to do really effectively with what I learned in 201 and 301. I could pretty easily make a website that would make use of a sql database and jquery to append stored articles to the website's dom, and use page.js to make it a neat, single page website, so I don't have repetitive html text across all of my pages. This, of course, would have taken SUBSTANTIALLY longer for me to code, and was against the explicit instructions of the assignment, as I figure we will be gaining most of this same functionality with pyramid, and other python systems. But still..."}
]